#!/bin/sh
#|-*- mode:lisp -*-|#
#| Generate C source code for all defined textures.
exec ros -Q -- $0 "$@"
|#
(progn
  (ros:ensure-asdf)
  (ql:quickload '(:imago) :silent t))

;;; Output --------------------------------------------------------------------

(defparameter +textures-to-generate+
  '(("TEXTURE_EMPTY"         . "textures/empty.png")
    ("TEXTURE_SOLID"         . "textures/solid.png")
    ("TEXTURE_STATIC"        . "textures/static.png")
    ("TEXTURE_UPGRADE_RANGE" . "textures/upgrade-range.png")
    ("TEXTURE_UPGRADE_BOMBS" . "textures/upgrade-bombs.png")
    ("TEXTURE_UPGRADE_SPEED" . "textures/upgrade-speed.png")
    ("TEXTURE_EXPLOSION"     . "textures/explosion.png")
    ("TEXTURE_BOMB_PLAYER_1" . "textures/bomb-player-1.png")
    ("TEXTURE_BOMB_PLAYER_2" . "textures/bomb-player-2.png")
    ("TEXTURE_PLAYER_1"      . "textures/player-1.png")
    ("TEXTURE_PLAYER_2"      . "textures/player-2.png")
    ("TEXTURE_ERROR"         . "textures/error.png")
    ("TEXTURE_UI"            . "textures/ui.png")))

(defparameter +texture-sizes+
  '(((16 . 16)  . 0)
    ((80 . 120) . 1)))

(defparameter +file-header+ "
/*
 * This file was generated by scripts/generate-textures. DO NOT EDIT!
 */

#include <pleasant-lcd.h>
#include \"texture.h\"
")

(defparameter +texture-definition-template+ "
const PROGMEM texture_t ~A = {
~A};
")

;;; Image conversion ----------------------------------------------------------

(defun texture-size-index (width height)
  (let ((index (cdr (assoc (cons width height)
                           +texture-sizes+
                           :test #'equal))))
    (prog1 index
      (unless index
        (error "Invalid image size ~Ax~A" width height)))))

(defun image-colors (image)
  (loop with colors = ()
        for x below (imago:image-width image)
        do (loop for y below (imago:image-height image)
                 do (pushnew (imago:image-pixel image x y)
                             colors))
        finally (return colors)))

(defun texture-header (size color-count bit-size)
  (format nil "~
TEXTURE_HEADER(~A, ~A, TEXTURE_UNIT_SIZE_~A_BITS, TEXTURE_ENCODING_PLAIN)"
          size
          color-count
          bit-size))

(defun texture-colors (colors)
  (with-output-to-string (out)
    (loop for color in colors
          collect (format out "  RGB(~A, ~A, ~A),~%"
                          (imago:color-red color)
                          (imago:color-green color)
                          (imago:color-blue color)))))

(defun texture-pixels (image colors bit-size)
  (with-output-to-string (out)
    (loop
      for y below (imago:image-height image)
      do (loop
           for x below (imago:image-width image)
           for color-index = (position (imago:image-pixel image x y)
                                       colors)
           do (cond
                ((zerop x) (format out "  0b"))
                ((zerop (mod (* x bit-size) 16))
                 (princ ", 0b" out)))
              (format out "~v,'0b" bit-size color-index))
         (format out ",~%"))))

(defun image->texture-content (input-path)
  (let* ((image (imago:read-image input-path))
         (colors (image-colors image))
         (color-count (length colors))
         (bit-size (if (<= color-count 4) 2 4)))
    (format nil "  ~A,~%~A~A"
            (texture-header (texture-size-index (imago:image-width image)
                                                (imago:image-height image))
                            color-count
                            bit-size)
            (texture-colors colors)
            (texture-pixels image colors bit-size))))

(defun image->texture-definition (name input-path)
  (format nil +texture-definition-template+
          name
          (image->texture-content input-path)))

;;; Main ----------------------------------------------------------------------

(defun main (&rest argv)
  (unless (= 1 (length argv))
    (format *error-output* "Usage: generate-textures OUTPUT-FILE~%")
    (return-from main 1))
  (loop for (name . file) in +textures-to-generate+
        unless (probe-file file)
          do (format *error-output*
                     "Input file ~A does not exist!~%"
                     file)
             (return-from main 2))
  (with-open-file (out (first argv)
                       :direction :output
                       :if-exists :supersede)
    (format out "~A~{~A~}"
            +file-header+
            (loop for (name . file) in +textures-to-generate+
                  collect (image->texture-definition name file)))))
